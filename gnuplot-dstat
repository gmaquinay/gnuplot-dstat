#!/bin/bash

generateGraphs()
{
  local inputFile=$1
  local outputDir=$2
  local hostName=${3:-""}

  awk -v statfile=$inputFile -v hostName=$hostName -v outputDir=$outputDir -F, 'BEGIN{ngroups=0} {
    if (NR == 5) { 
      nfields=split($0,fields,",")
      for (i=1;i<=nfields;i++) { 
        if (length(fields[i]) > 0) { 
          ngroups+=1 ; groups[ngroups".name"]=fields[i]; groups[ngroups".nvalues"]=1;
        } else {
          groups[ngroups".nvalues"]+=1
        }
      }
    } else if(NR==6) { 
      j=1;
      for (n=1;n<=ngroups;n++) { 
        for (f=1;f<=groups[n".nvalues"];f++) { 
          groups[n".fieldname"f] = $j ; 
          groups[n".fieldindex"f] = j; 
          j++ 
        }
      }
    }
  } END{ 
    timeIndex=-1;
    for (i=1;i<=ngroups;i++) { 
      if (groups[i".name"] == "\"time\"") {
        timeIndex = groups[i".fieldindex"1];
        break
      }
    }
    if (timeIndex == -1) {
      print "Cannot find time in CSV file. Aborting." > "/dev/stderr"
      exit(1)
    }
    for (i=1;i<=ngroups;i++) { 

      yrange = "null";
      yformat = "null";

      if (groups[i".name"] ~ "cpu[0-9]* usage") {
        ylabel="Percent"
        yrange="[0:100]"
      } else if (groups[i".name"] ~ "dsk") {
        ylabel="Bytes"
        yformat="%.0s%cB"
        yrange="[0:*]"
      } else if (groups[i".name"] ~ "net") {
        ylabel="Bytes"
        yformat="%.0s%cB"
        yrange="[0:*]"
      } else if (groups[i".name"] ~ "sockets") {
        ylabel=""
        yrange="[0:*]"
      } else {
        continue;
      }

      titleNoQuotes = groups[i".name"];
      gsub("\"", "", titleNoQuotes);
      titleNoQuotesNoSpaces = titleNoQuotes;
      gsub("[ /]", "_", titleNoQuotesNoSpaces);
       
      # plotfile = "/tmp/report/" titleNoQuotesNoSpaces ".plot"
      plotfile = "/dev/shm/plotfile"
      if (length(hostName) > 0) {
        outputFilename = hostName "_" titleNoQuotesNoSpaces ".png"
      } else {
        outputFilename = titleNoQuotesNoSpaces ".png"
      }
      output = outputDir "/" outputFilename
      print "set terminal png size 1200,800 enhanced font \"Helvetica,14\"" > plotfile
      print "set datafile separator \",\"" >> plotfile
      print "set output \"" output "\"" >> plotfile
      print "set title \"" hostName " " titleNoQuotes "\"" >> plotfile
      print "set xlabel \"time\"" >> plotfile
      print "set xdata time" >> plotfile
      print "set ylabel \"" ylabel "\"" >> plotfile
      print "set timefmt \"%d-%m %H:%M:%S\"" >> plotfile
      print "set format x \"%H:%M:%S\"" >> plotfile
      if (yformat != "null") {
        print "set format y \"" yformat "\"" >> plotfile
      }
      if (yrange != "null") {
        print "set yrange " yrange >> plotfile
      }
      printf "plot " >> plotfile
      for (j=1; j <= groups[i".nvalues"]; j++) {
        gsub(titleNoQuotes":", "", groups[i".fieldname"j])
        if (j > 1) { printf(", ") >> plotfile }
        printf("\"%s\" using %d:%d:(1.0) title %s smooth acsplines", statfile, timeIndex, groups[i".fieldindex"j], groups[i".fieldname"j]) >> plotfile
      }
      printf("\n") >> plotfile
      close(plotfile)
      system("gnuplot < " plotfile)
      print outputFilename
    }
  }' $1
}

usage()
{
  echo
  echo "usage: $0 -i <inputFile> [-o <outputdir>]"
  echo
  echo "  Generates PNG graphics from dstat file"
  echo "  So far, only CPU, mem, sockets and disks stats are supported."
  echo 
  echo "  -i|--input <inputFile>   CSV file generated by dstat"
  echo "                           Example of dstat command:"
  echo "                             > dstat -t -a --socket -p -C 0,1,2,3,total --aio --top-cpu --top-mem --output out.csv --noupdate --nocolor 5"
  echo "  -o|--outputdir <dir>     Directory where generated PNG files will be saved"
  echo

}

! which gawk &>/dev/null && echo "Missing gawk. Please install it and take another try" >&2 && exit 1

declare inputFile
declare outputDir=$(readlink -f $PWD)
declare hostName

while [[ $1 == -* ]]; do
  case "$1" in
    -i|--input)
      [ -z "$2" ] && echo "Missing file argument after -i|--input option" >&2 && exit 1
      [ ! -f "$2" ] && echo "No such file: $2" >&2 && exit 1
      inputFile=$(readlink -f "$2")
      shift
      ;;
    -o|--outputdir)
      [ -z "$2" ] && echo "Missing directory argument after -o|--outputdir option" >&2 && exit 1
      ! mkdir -p $2 && echo "Cannot create directory $2" >&2 && exit 1
      outputDir=$(readlink -f "$2")
      shift
      ;;
    -n|--hostname)
      [ -z "$2" ] && echo "Missing directory argument after -o|--outputdir option" >&2 && exit 1
      hostName=$2
      shift
      ;;
    -h|--help)
      usage && exit 0
      ;;
    *) 
      echo "invalid option: $1" >&2 && exit 1
      ;;
  esac
  shift
done

[ -z $inputFile ] && usage && exit 1

generatedFiles=$(generateGraphs $inputFile $outputDir $hostName)

{
echo "<h1>$hostName Performances report</h1"
for file in $generatedFiles; do 
  echo "<a href='$file'><img width=480 height=200 src='$file'></a>"
done
} > $outputDir/index.html


